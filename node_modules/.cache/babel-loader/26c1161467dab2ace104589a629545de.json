{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/muzaqi/Desktop/build-a-website-2/src/containers/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../components/Header\";\nimport WeatherImage from \"../components/WeatherImage\";\nimport City from \"../components/City\";\n\nfunction Home() {\n  _s();\n\n  const history = useHistory();\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(\"Jakarta\");\n  const [cities, setCities] = useState([{\n    name: \"Jakarta\",\n    currentTemp: \"0\",\n    weatherType: \"\",\n    color: \"flex flex-col items-center bg-yellow-100 m-8\"\n  }, {\n    name: \"New York\",\n    currentTemp: \"0\",\n    weatherType: \"\",\n    color: \"flex flex-col items-center text-black bg-yellow-100 m-8\"\n  }, {\n    name: \"Tokyo\",\n    currentTemp: \"0\",\n    weatherType: \"\",\n    color: \"flex flex-col items-center text-black bg-yellow-100 m-8\"\n  }, {\n    name: \"Doha\",\n    currentTemp: \"0\",\n    weatherType: \"\",\n    color: \"flex flex-col items-center text-black bg-yellow-100 m-8\"\n  }, {\n    name: \"Yogyakarta\",\n    currentTemp: \"0\",\n    weatherType: \"\",\n    color: \"flex flex-col items-center text-black bg-yellow-100 m-8\"\n  }, {\n    name: \"Kuala Lumpur\",\n    currentTemp: \"0\",\n    weatherType: \"\",\n    color: \"flex flex-col items-center text-black bg-yellow-100 m-8\"\n  }, {\n    name: \"Sulaymaniyah\",\n    currentTemp: \"0\",\n    weatherType: \"\",\n    color: \"flex flex-col items-center text-black m-8\"\n  }]);\n  useEffect(() => {\n    updateAllWeatherData();\n  }, []); // Fetch the weather data for 1 city\n\n  async function fetchWeatherData(cityName) {\n    const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`).then(function (response) {\n      // Successful request\n      const weather = response.data;\n      return weather;\n    }).catch(function (error) {\n      // The best practice of coding is to not use console.log\n      console.warn(error);\n    });\n    return res;\n  } // update the list data\n\n\n  async function updateAllWeatherData(params) {\n    cities.forEach(function (citiesItems, index) {\n      let weatherData = {};\n      let newCities = [...cities];\n      fetchWeatherData(citiesItems.name).then(res => {\n        weatherData = res;\n        newCities[index].currentTemp = weatherData.main.temp;\n        newCities[index].weatherType = weatherData.weather[0].main;\n        setCities(newCities);\n      });\n    });\n  }\n\n  return (\n    /*#__PURE__*/\n    // Container\n    _jsxDEV(\"div\", {\n      className: \"flex flex-col h-screen bg-gray-50 font-serif\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center text-6xl bg-green-100 text-green-500 p-6\",\n        children: \" Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"flex flex-wrap justify-center\",\n        children: cities.map((item, index) => /*#__PURE__*/_jsxDEV(City, {\n          cityName: item.name,\n          temp: item.currentTemp,\n          color: item.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(Home, \"L790UTpnL1BNQkpAAKiUxVQOcxs=\", false, function () {\n  return [useHistory];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/muzaqi/Desktop/build-a-website-2/src/containers/Home.js"],"names":["React","useState","useEffect","useMemo","axios","useHistory","Header","WeatherImage","City","Home","history","weatherData","setWeatherData","city","setCity","cities","setCities","name","currentTemp","weatherType","color","updateAllWeatherData","fetchWeatherData","cityName","res","get","process","env","REACT_APP_WEATHER_API_KEY","then","response","weather","data","catch","error","console","warn","params","forEach","citiesItems","index","newCities","main","temp","map","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Header from \"../components/Header\";\nimport WeatherImage from \"../components/WeatherImage\";\n\nimport City from \"../components/City\";\n\nfunction Home() {\n  const history = useHistory();\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(\"Jakarta\");\n\n  const [cities, setCities] = useState([\n    {\n      name: \"Jakarta\",\n      currentTemp: \"0\",\n      weatherType: \"\",\n      color: \"flex flex-col items-center bg-yellow-100 m-8\",\n    },\n    {\n      name: \"New York\",\n      currentTemp: \"0\",\n      weatherType: \"\",\n      color: \"flex flex-col items-center text-black bg-yellow-100 m-8\",\n    },\n    {\n      name: \"Tokyo\",\n      currentTemp: \"0\",\n      weatherType: \"\",\n      color: \"flex flex-col items-center text-black bg-yellow-100 m-8\",\n    },\n    {\n      name: \"Doha\",\n      currentTemp: \"0\",\n      weatherType: \"\",\n      color: \"flex flex-col items-center text-black bg-yellow-100 m-8\",\n    },\n    {\n      name: \"Yogyakarta\",\n      currentTemp: \"0\",\n      weatherType: \"\",\n      color: \"flex flex-col items-center text-black bg-yellow-100 m-8\",\n    }, \n    {\n      name: \"Kuala Lumpur\",\n      currentTemp: \"0\",\n      weatherType: \"\",\n      color: \"flex flex-col items-center text-black bg-yellow-100 m-8\",\n    },\n    {\n      name: \"Sulaymaniyah\",\n      currentTemp: \"0\",\n      weatherType: \"\",\n      color: \"flex flex-col items-center text-black m-8\",\n    },\n  ]);\n\n  useEffect(() => {\n    updateAllWeatherData();\n  }, []);\n\n   // Fetch the weather data for 1 city\n   async function fetchWeatherData(cityName) {\n    const res = await axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\n      )\n      .then(function (response) {\n        // Successful request\n        const weather = response.data;\n        return weather;\n      })\n      .catch(function (error) {\n        // The best practice of coding is to not use console.log\n        console.warn(error);\n      });\n\n    return res;\n  }\n\n  // update the list data\n  async function updateAllWeatherData(params) {\n    cities.forEach(function (citiesItems, index) {\n      let weatherData = {};\n      let newCities = [...cities];\n\n      fetchWeatherData(citiesItems.name).then((res) => {\n        weatherData = res;\n\n        newCities[index].currentTemp = weatherData.main.temp;\n        newCities[index].weatherType = weatherData.weather[0].main;\n        setCities(newCities);\n      });\n    });\n  }\n\n\n\n  return (\n    // Container\n    <div className=\"flex flex-col h-screen bg-gray-50 font-serif\">\n      <div className=\"flex flex-col items-center text-6xl bg-green-100 text-green-500 p-6\"> Weather App</div>\n      <span className=\"flex flex-wrap justify-center\">\n      {cities.map((item, index) => (\n        <City cityName={item.name} temp={item.currentTemp} color={item.color} />\n      ))}\n      </span>\n     </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}